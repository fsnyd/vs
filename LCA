#include <iostream>
#include <vector>
#include <queue>
using namespace std;
vector<int>arr[50005];
queue<int>q;
int visit[50001];
class node
{
public:
	int parent;
	int depth;
	int data;
};
node tree[50001];
int moveTodepth(int a, int depth)
{
	while (tree[a].depth != depth)
	{
		a = tree[a].parent;
	}
	return a;
}
int LCA(int a, int b)
{
	if (tree[a].depth != tree[b].depth)
	{
		if (tree[a].depth < tree[b].depth)
		{
			b=moveTodepth(b, tree[a].depth);
		}
		if (tree[a].depth > tree[b].depth)
		{
			a=moveTodepth(a, tree[b].depth);
		}
	}
	while (a != b)
	{
		a = tree[a].parent;
		b = tree[b].parent;
	}

	return a;
}
int main()
{
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	int n, m;
	int a, b;
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		arr[i].push_back(i);
	}
	for (int i = 1; i < n; i++)
	{
		cin >> a >> b;
		arr[a].push_back(b);
		arr[b].push_back(a);
	}
	q.push(1);
	visit[1] = 1;
	while (!q.empty())
	{
		int t = q.front();
		q.pop();
		for (int i = 0; i < arr[t].size(); i++)
		{
			int n = arr[t][i];
			if (!visit[n])
			{
				tree[n].parent = t;
				tree[n].depth = tree[t].depth + 1;
				q.push(n);
				visit[n] = 1;
			}
		}
	}
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		cin >> a >> b;
		printf("%d \n",LCA(a,b));
	}
	return 0;
}
