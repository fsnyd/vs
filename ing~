#include <iostream>
#include <stdio.h>
using namespace std;
int h, w, c;
int map[50][50];
typedef struct pos
{
	int x;
	int y;
}pos;
pos queue[20000];
int front = -1;
int rear = -1;
int isEmpty()
{
	if (front == rear)
		return 1;
	else
		return 0;
}
void enqueue(pos p)
{
	rear++;
	queue[rear] = p;
}
pos dequeue()
{
	if (!isEmpty())
	{
		front++;
		return queue[front];
	}
}
int dx[] = { 1, -1, 0, 0 };
int dy[] = { 0, 0, 1, -1 };
void bfs(int y, int x)
{
	enqueue({ x, y });
	map[y][x] = 0;
	while (!isEmpty())
	{
		pos t = dequeue();
		for (int i = 0; i<4; i++)
		{
			pos next = { t.x + dx[i], t.y + dy[i] };   
			if (next.x >= 0 && next.x < w &&next.y >= 0 && next.y < h&&map[next.y][next.x] == 1)
			{
				enqueue({ next.x, next.y });
				map[next.y][next.x] = 0;
			}
		}
	}
}
int main()
{
	while (1)
	{
		int cnt = 0;
		cin >> w >> h;
		if (w == 0 && h == 0)
			return 0;
		for (int i = 0; i < h; i++)
		{
			for (int j = 0; j < w; j++)
			{
				cin >> map[i][j];
			}
		}
		cout << endl;
		cin.ignore();
		for (int i = 0; i < h; i++)
		{
			for (int j = 0; j < w; j++)
			{
				cout<< map[i][j]<<" ";
			}
			cout << endl;
	
		}
		/*for (int i = 0; i < h; i++)
		{
			for (int j = 0; j < w; j++)
			{
				if (map[i][j])
					bfs(i, j);
				cnt++;
			}
		}
		for (int i = 0; i < h; i++)
		{
			for (int j = 0; j < w; j++)
			{
				map[i][j] = 0;
			}
		}*/
		cout << cnt << endl;
	}
	//}
}
